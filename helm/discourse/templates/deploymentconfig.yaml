apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    description: Defines how to deploy the application server
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: discourse
    template: discourse-template
  name: {{ .Values.name }}
spec:
  replicas: 1
  selector:
    name: {{ .Values.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: {{ .Values.name }}
      name: {{ .Values.name }}
    spec:
      containers:
      - command:
        - sh
        - -c
        - bundler exec sidekiq -C config/sidekiq.yml
        env:
        - name: PUMA_WORKERS
          value: "2"
        - name: DISCOURSE_DB_TYPE
          value: postgresql
        - name: DISCOURSE_DB_HOST
          value: postgresql
        - name: DISCOURSE_DB_NAME
          value: discourse
        - name: DISCOURSE_DB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: discourse
        - name: DISCOURSE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: discourse
        - name: APP_MODULE
          value: app
        - name: DISCOURSE_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: {{ .Values.name }}
        - name: DISCOURSE_REDIS_HOST
          value: redis
        - name: RAILS_ENV
          value: production
        - name: RAILS_SERVE_STATIC_FILES
          value: "true"
        - name: DISCOURSE_SERVE_STATIC_ASSETS
          value: "true"
        - name: DISCOURSE_ADMIN_EMAILS
          valueFrom:
            secretKeyRef:
              key: site-admin-user
              name: {{ .Values.name }}
        - name: DISCOURSE_SMTP_USER_NAME
          valueFrom:
            secretKeyRef:
              key: smtp-user
              name: {{ .Values.name }}
        - name: DISCOURSE_ADMIN_EMAILS_KEY
          valueFrom:
            secretKeyRef:
              key: site-admin-password
              name: {{ .Values.name }}
        - name: DISCOURSE_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: smtp-password
              name: {{ .Values.name }}
        - name: DISCOURSE_SMTP_ADDRESS
          value: mx1.osci.io
        - name: DISCOURSE_SMTP_PORT
          value: "587"
        - name: SMTP_ENABLE_START_TLS
          value: "true"
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.project_name }}/discourse:latest
        name: discourse-sidekiq
        volumeMounts:
        - mountPath: /opt/app-root/src/public/uploads/
          name: discourse-uploads
      - command:
        - sh
        - -c
        - nginx -g "daemon off;" -c $NGINX_CONFIGURATION_PATH/nginx.conf
        env:
        - name: DISCOURSE_DB_HOST
        - name: DISCOURSE_DB_PASSWORD
        - name: DISCOURSE_REDIS_PASSWORD
        - name: DISCOURSE_REDIS_HOST
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.project_name }}/discourse:latest
        livenessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 30
          timeoutSeconds: 3
        name: discourse-nginx
        ports:
        - containerPort: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 3
          timeoutSeconds: 3
        resources:
          limits:
            memory: {{ .Values.memory_limit }}
        volumeMounts:
        - mountPath: /opt/app-root/src/public/uploads/
          name: discourse-uploads
      - env:
        - name: PUMA_WORKERS
          value: "2"
        - name: DISCOURSE_DB_TYPE
          value: postgresql
        - name: DISCOURSE_DB_HOST
          value: postgresql
        - name: DISCOURSE_DB_NAME
          value: {{ .Values.database_name }}
        - name: DISCOURSE_DB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: {{ .Values.name }}
        - name: DISCOURSE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: {{ .Values.name }}
        - name: APP_MODULE
          value: app
        - name: DISCOURSE_REDIS_PASSWORD
          value: {{ .Values.redis_password }}
        - name: DISCOURSE_REDIS_HOST
          value: redis
        - name: RAILS_ENV
          value: production
        - name: RAILS_SERVE_STATIC_FILES
          value: "true"
        - name: DISCOURSE_SERVE_STATIC_ASSETS
          value: "true"
        - name: DISCOURSE_ADMIN_EMAILS
          valueFrom:
            secretKeyRef:
              key: site-admin-user
              name: {{ .Values.name }}
        - name: DISCOURSE_ADMIN_EMAILS_KEY
          valueFrom:
            secretKeyRef:
              key: site-admin-password
              name: {{ .Values.name }}
        - name: DISCOURSE_SMTP_USER_NAME
          valueFrom:
            secretKeyRef:
              key: smtp-user
              name: discourse
        - name: DISCOURSE_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: smtp-password
              name: {{ .Values.name }}
        - name: DISCOURSE_SMTP_ADDRESS
          value: {{ .Values.smtp_address }}
        - name: DISCOURSE_SMTP_PORT
          value: {{ .Values.smtp_port }}
        - name: SMTP_ENABLE_START_TLS
          value: "true"
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.project_name }}/discourse:latest
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 3
        name: discourse-puma
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          timeoutSeconds: 3
        resources:
          limits:
            memory: {{ .Values.memory_limit }}
        volumeMounts:
        - mountPath: /opt/app-root/src/public/uploads/
          name: discourse-uploads
      initContainers:
      - command:
        - sh
        - -c
        - rake db:migrate --trace && $STI_SCRIPTS_PATH/initAdmins
        env:
        - name: DISCOURSE_ADMIN_EMAILS
          valueFrom:
            secretKeyRef:
              key: site-admin-user
              name: {{ .Values.name }}
        - name: DISCOURSE_ADMIN_EMAILS_KEY
          valueFrom:
            secretKeyRef:
              key: site-admin-password
              name: {{ .Values.name }}
        image: image-registry.openshift-image-registry.svc:5000/{{ .Values.project_name }}/discourse:latest
        name: init-database-table
      volumes:
      - name: discourse-uploads
        persistentVolumeClaim:
          claimName: discourse-uploads
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - discourse-puma
      from:
        kind: ImageStreamTag
        name: {{ .Values.name }}:latest
    type: ImageChange
  - type: ConfigChange
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    description: Defines how to deploy the database
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: discourse
    template: discourse-template
  name: postgresql
spec:
  replicas: 1
  selector:
    name: postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: postgresql
      name: postgresql
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: {{ .Values.name }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: {{ .Values.name }}
        - name: POSTGRESQL_DATABASE
          value: {{ .Values.database_name }}
        image: ' '
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          initialDelaySeconds: 120
          timeoutSeconds: 10
        name: postgresql
        ports:
        - containerPort: 5432
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: {{ .Values.memory_postgresql_limit }}
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgresql-data
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:{{ .Values.postgresql_version }}
        namespace: {{ .Values.namespace }}
    type: ImageChange
  - type: ConfigChange
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app: discourse
    template: discourse-template
  name: redis
spec:
  replicas: 1
  selector:
    name: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: redis
      name: redis
    spec:
      containers:
      - capabilities: {}
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: {{ .Values.name }}
        image: ' '
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 6379
          timeoutSeconds: 1
        name: redis
        ports:
        - containerPort: 6379
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: {{ .Values.memory_limit }}
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/redis/data
          name: redis-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - redis
      from:
        kind: ImageStreamTag
        name: redis:{{ .Values.redis_version }}
        namespace: {{ .Values.namespace }}
      lastTriggeredImage: ""
    type: ImageChange
  - type: ConfigChange
status: {}
